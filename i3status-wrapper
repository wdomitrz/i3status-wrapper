#!/usr/bin/env python3
# vim:foldmethod=marker

################################################################
# Copyright (c) 2021 Witalis Domitrz <witekdomitrz@gmail.com>
# MIT License
################################################################


import json
import sys
from itertools import islice
from multiprocessing import Process
from subprocess import PIPE, Popen, run

REFRESH_STATUS_CMD = ["killall", "-SIGUSR1", "i3status"]

# Config {{{
BLOCKS = [
    {
        "name": "terminal",
        "full_text": "üìÑ"
    },
    {
        "name": "menu",
        "full_text": "üîç"
    }
]


def run_command(cmd, block=False):
    if not block:
        Popen(cmd, stdout=PIPE, stderr=PIPE)
    else:
        run(cmd, stdout=PIPE, stderr=PIPE)


def process_blocks(old_blocks):
    return old_blocks + BLOCKS


def run_command_on_click(cmd, accepted_button=1):
    def helper(button, **_):
        if button == accepted_button:
            run_command(cmd)
    return helper


def handle_volume(button, **_):
    if button == 3:
        run_command("pavucontrol")
        return
    elif button in [1, 2]:
        cmd = ["pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle"]
    elif button in [4, 7]:
        cmd = ["pactl", "set-sink-volume", "@DEFAULT_SINK@", "+1%"]
    elif button in [5, 6]:
        cmd = ["pactl", "set-sink-volume", "@DEFAULT_SINK@", "-1%"]
    run_command(cmd, block=True)
    run_command(REFRESH_STATUS_CMD)


BUTTONS = {
    "terminal": run_command_on_click("x-terminal-emulator"),
    "menu": run_command_on_click(["gtk-launch", "run-menu"]),
    "time": run_command_on_click(["xdg-open", "https://calendar.google.com/"]),
    "tztime": run_command_on_click(["xdg-open", "https://calendar.google.com/"]),
    "ipv6": run_command_on_click("nm-connection-editor"),
    "wireless": run_command_on_click("nm-connection-editor"),
    "ethernet": run_command_on_click("nm-connection-editor"),
    "load": run_command_on_click("xfce4-taskmanager"),
    "cpu_temperature": run_command_on_click("xfce4-taskmanager"),
    "volume": handle_volume,
    "battery": run_command_on_click("xfce4-power-manager-settings"),
    "disk_info": run_command_on_click("nautilus")
}
# }}}

# Execution {{{
HEADER = {"version": 1, "click_events": True}


def show_status_text():
    i3status = Popen('i3status', stdout=PIPE)

    print(json.dumps(HEADER, separators=(',', ':')), flush=True)
    print('[', flush=True)

    # Discard the first two lines
    for line in map(bytes.decode, islice(i3status.stdout, 2, None)):
        data = process_blocks(json.loads(line.strip(',')))
        print((',' if line[0] == ',' else '') +
              json.dumps(data, separators=(',', ':')), flush=True)
    print(']', flush=True)


def handle_click(line):
    data = json.loads(line.strip(','))
    name = data["name"]
    if name in BUTTONS:
        BUTTONS[name](**data)


def clicks_handler():
    for line in islice(sys.stdin, 1, None):
        Process(target=handle_click, args=[line]).start()


def main():
    process = Process(target=show_status_text)
    process.start()
    clicks_handler()
    process.join()


if __name__ == '__main__':
    main()
# }}}
